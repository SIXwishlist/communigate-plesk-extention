<?phpclass IndexController extends pm_Controller_Action{	public function init()	{		parent::init();        // Init title for all actions		$this->view->pageTitle = 'Unified Messaging';		$mailingList = $this->_helper->url("index", "list");		$accounts = $this->_helper->url("list-Accounts", "index");        // Init tabs for all actions		$this->view->tabs = array(			array(				'title' => 'Accounts',				'link' => $accounts,				),			array(				'title' => 'Mailing Lists',				'link' => $mailingList,				),			);	}    /*    ***************     * this action gets the domain the user is subscribed    * to and if user is admin is prompting for domain to manage    ***************    */    public function indexAction()    {    	$client = pm_Session::getClient();    	if ($client->isAdmin()) {    		$form = new Modules_Communigate_Form_Domain();    		$this->view->text = "Type the domain you want to manage";    		$this->view->form = $form;    		$link = "<a href=".$this->_helper->url("index", "domain")." class=\"btn\">Create Domain</a>";    		$serverSettingsBtn = "<a href=".$this->_helper->url("set-Server-Settings", "index")." class=\"btn\">Set Server Settings</a>";    		$this->view->link = $link;    		$this->view->serverSettingsBtn = $serverSettingsBtn;      		if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    			$domain = $form->getValue('domain');    			setcookie('domain',$domain,time()+3600);    			$this->_helper->json(array('redirect' => $this->_helper->url("list-Accounts", "index")));    		}    	} else {            $domain = pm_Session::getCurrentDomain();            $domainName = $domain->getName();    		setcookie('domain',$domainName,time()+3600);          		$this->_helper->redirector('list-Accounts', 'index');    	}         }    /*    ***************     * Action listing accounts    ***************    */    public function listAccountsAction()    {    	$smallTools = $this->_getSmallTools();    	$this->view->smallTools = $smallTools;     	$list = $this->_getListAccounts();    	$button = "<a href=".$this->_helper->url("create-Account", "index")." class=\"btn\">Create Account</a>";    	$this->view->button = $button;    	$this->view->text = "Set up basic email accounts";        // List object for pm_View_Helper_RenderList    	$this->view->list = $list;    }    /*    ***************     * Action for creating accounts    ***************    */    public function createAccountAction()    {    	$form = new Modules_Communigate_Form_Account();     	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    		$form->process();    		$this->_status->addMessage('info', 'Account succesfully created!');    		$this->_helper->json(array('redirect' => $this->_helper->url("list-Accounts", "index")));    	}    	$smallTools = $this->_getSmallTools();    	$this->view->text = 'Please fill the form to create account';    	$this->view->smallTools = $smallTools;    	$this->view->form = $form;        }    /*    ***************     * This method is for updating account settings    ***************    */    public function updateAccountAction()    {    	$account = $this->_getParam('account');    	$smallTools = $this->_getSmallTools();    	$this->view->smallTools = $smallTools;     	$this->view->text = 'Please fill the form to update account';    	$form = new Modules_Communigate_Form_Account();    	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    		$form->process();    		$this->_status->addMessage('info', 'Account succesfully updated!');    		$this->_helper->json(array('redirect' => $this->_helper->url("list-Accounts", "index")));    	}    	$this->view->form = $form;    }    /*    ***************     * Method for deleting accounts    ***************    */    public function deleteAccountAction()    {    	$request = new Zend_Controller_Request_Http();    	$domain = $request->getCookie('domain');    	$acc = new Modules_Communigate_Custom_Accounts($domain);    	$account = $this->_getParam('account');    	$acc->deleteAccount($account);    	$this->_status->addMessage('info', "Account $account was succesfully deleted!");    	$this->_helper->redirector('list-Accounts', 'index');    }    /*    ***************     * Action listing aliases    ***************    */    public function listAliasesAction()    {    	$smallTools = $this->_getSmallTools();    	$this->view->smallTools = $smallTools;      	$list = $this->_getListAliases();    	$this->view->text = "Set up account aliases";         // List object for pm_View_Helper_RenderList    	$this->view->list = $list;    }    /*    ***************     * Action for creating aliases    ***************    */    public function createAliasesAction()    {    	$smallTools = $this->_getSmallTools();    	$this->view->smallTools = $smallTools;     	$this->view->text = 'Please fill the form to create account alias';    	$form = new Modules_Communigate_Form_Aliases();    	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    		$form->process();    		$this->_status->addMessage('info', "Alias succesfully created!");    		$this->_helper->json(array('redirect' => $this->_helper->url("list-Aliases", "index")));    	}    	$this->view->form = $form;    }    /*    ***************     * Action for setting the possible access modes for accounts    ***************    */    public function setTypesAction()    {    	$this->view->text = 'Fill this form to create a new Service Class for yor domain';    	$form = new Modules_Communigate_Form_SetType();     	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    		$form->process();    		$this->_status->addMessage('info', 'Service Class succesfully created');    		$this->_helper->json(array('redirect' => $this->_helper->url("list-Accounts", "index")));    	}    	$smallTools = $this->_getSmallTools();    	$this->view->smallTools = $smallTools;    	$this->view->form = $form;    }    public function listDataAction()    {    	$list = $this->_getListAccounts();        // Json data from pm_View_List_Simple    	$this->_helper->json($list->fetchData());    }    /*    ***************     * Action for creating default addresses    ***************    */    public function defaultAddressesAction()    {    	$this->view->heading = 'Set Default Addresses';     	$smallTools = $this->_getSmallTools();    	$this->view->smallTools = $smallTools;     	$form = new Modules_Communigate_Form_DefaultAddresses();    	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    		$form->process();    		$this->_status->addMessage('info', "Default addresses had been set");    		$this->_helper->json(array('redirect' => $this->_helper->url("list-Accounts", "index")));    	}    	$this->view->form = $form;    }    public function setServerSettingsAction()    {    	// $smallTools = $this->_getSmallTools();    	// $this->view->smallTools = $smallTools;     	$this->view->text = 'Set Server Settings';    	$form = new Modules_Communigate_Form_ServerSettings();    	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {    		$form->process();    		$this->_status->addMessage('info', "Server settings changed!");    		$this->_helper->json(array('redirect' => $this->_helper->url("index", "index")));    	}    	$this->view->form = $form;    }    /*    ***************     * Method organizing the data for the accounts list    ***************    */    private function _getListAccounts()    {    	$request = new Zend_Controller_Request_Http();    	$domain = $request->getCookie('domain');    	$accounts = new Modules_Communigate_Custom_Accounts($domain);    	$accountData  = $accounts->data();    	$webMailIcon = pm_Context::getBaseUrl() . "images/cgpro_webemail_trans.png";    	$data = array();    	foreach ($accountData as $info) {    		$aliases = ($info['accountAliases'] !== '' ? " (". $info['accountAliases']. ")" : '');            $webMailLink = pm_Settings::get('webMail');    		$data[] = array(    			'column-1' => $info['account'] . $aliases,    			'column-2' => $info['E-mail'],    			'column-3' => $info['type'],    			'column-4' => $info['usage'],    			'column-5' =>     			'<a style="text-decoration:none" href="'.$webMailLink.'" target="_blank">'. '<img src="' . $webMailIcon . '" /> '.'</a>' .    			$this->addButton('index', 'update-Account', 'cgpro_account_change_details.png',    				array('account' => $info['account'])) .    			$this->addButton('index', 'delete-Account', 'cgpro_account_delete.png',    				array('account' => $info['account']), 'btnRemove', ''),    			);    	}    	$list = new pm_View_List_Simple($this->view, $this->_request);    	$list->setData($data);    	$list->setColumns(array(    		'column-1' => array(    			'title' => 'Account Name',    			'noEscape' => true,    			),    		'column-2' => array(    			'title' => 'Account E-mail',    			'noEscape' => true,    			),    		'column-3' => array(    			'title' => 'Account Type',    			'noEscape' => true,    			),    		'column-4' => array(    			'title' => 'Usage',    			'noEscape' => true,    			),    		'column-5' => array(    			'title' => '',    			'noEscape' => true,    			),    		));        // Take into account listDataAction corresponds to the URL /list-data/    	$list->setDataUrl(array('action' => 'list-data'));    	return $list;    }    /*    ***************     * Method organizing the data for the alias list    ***************    */    public function _getListAliases($view, $request)    {    	$request = new Zend_Controller_Request_Http();    	$domain = $request->getCookie('domain');    	$accounts = new Modules_Communigate_Custom_Accounts($domain);    	$accountData  = $accounts->data();    	$data = array();    	foreach ($accountData as $info) {     		$data[] = array(    			'column-1' => $info['account'],    			'column-2' => $info['accountAliases'],    			'column-3' =>     			$this->addButton('index', 'create-aliases', 'icon_16.gif', array('account' => $info['account']))    			);    	}    	$list = new pm_View_List_Simple($this->view, $this->_request);    	$list->setData($data);    	$list->setColumns(array(    		'column-1' => array(    			'title' => 'Account Name',    			'noEscape' => true,    			),    		'column-2' => array(    			'title' => 'Account Aliases',    			'noEscape' => true,    			),    		'column-3' => array(    			'title' => '',    			'noEscape' => true,    			),    		));        // Take into account listDataAction corresponds to the URL /list-data/    	$list->setDataUrl(array('action' => 'list-data'));    	return $list;       }    /*    ***************     * Method creating the small tool bar    ***************    */    public function _getSmallTools()    {    	$smallTools = array(    		array(    			'title' => 'Accounts',    			'description' => 'Example module with UI samples',    			'class' => 'accounts',    			'action' => 'list-Accounts',    			'icon' => pm_Context::getBaseUrl() . "images/cgpro_manageaccounts"                // 'link' => pm_Context::getBaseUrl(),    			),    		array(    			'title' => 'Aliases',    			'description' => 'Example module with UI samples',    			'class' => 'aliases',    			'action' => 'list-Aliases'                // 'link' => pm_Context::getBaseUrl(),    			),    		array(    			'title' => 'Default Addresses',    			'description' => 'Example module with UI samples',    			'class' => 'default-addresses',    			'action' => 'default-Addresses'                // 'link' => pm_Context::getBaseUrl(),    			),    		array(    			'title' => 'Forwarders',    			'description' => 'Example module with UI samples',    			'class' => 'forwarders',                // 'action' => 'default-Addresses'    			'link' => $this->_helper->url("index", "forwarders"),    			),    		array(    			'title' => 'Auto Responders',    			'description' => 'Example module with UI samples',    			'class' => 'auto-responders',                // 'action' => 'default-Addresses'    			'link' => $this->_helper->url("index", "auto-responders"),    			),    		); 			$client = pm_Session::getClient();			if ($client->isAdmin()) {				array_push($smallTools, array(					'title' => 'Change Domain',					'description' => 'Modules installed in the Panel',					'class' => 'sb-suspend',					'link' => pm_Context::getBaseUrl(),					));				array_push($smallTools, array(					'title' => 'Account Types',					'description' => 'Modules installed in the Panel',					'class' => 'sb-suspend',					'action' => 'set-Types',					));			}			return $smallTools;		}    /*    ***************     * Action for creating link button with params and image    ***************    */    public function addButton($controller, $action, $imgName, $params='', $class = '', $id = '')    {    	$href = $this->_helper->url($action, $controller, '', $params);    	$iconPath = pm_Context::getBaseUrl() . "images/$imgName";    	$img = '<img src="' . $iconPath . '" /> ';    	if ($confirm) {    		$onclick = 'onclick="return confirm(\'Are you sure you want to delete this account?\');"';    	} else {    		$onclick = "";    	}    	return sprintf("<a style=\"text-decoration:none\" href=%s class=\"%s\" id=%s>%s</a>", $href, $class, $id, $img);    }}